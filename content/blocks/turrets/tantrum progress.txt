drawer: {
	type: DrawTurret
    parts: [
    {
            type: RegionPart
            suffix: "-piston"
            mirror: false
            #Offset it slightly upwards
            y: 2.13093
            moveY: 1
            clampProgress: false
            progress: {
                type: reload
                ops: [
                    #Get the current angle of the shaft
                    
                    #Aproximate the arcos function + some jank, but with a period of 2pi and no modulus jank
                    
                    {
                        op: add
                        #Average of the function
                        amount: a0
                    }

                    #Add on the cos waves
                    {
                        op: add
                        other: {
                            type: reload
                            ops: [
                                #Make the prog go from 0 to 2pi
                                {
                                    op: mul
                                    amount: m1
                                }
                                {
                                    op: add
                                    #Add the rotation offset
                                    amount: b0
                                }
                                 #please don't smite me, I swear this is just for consistiency's sake
                                {
                                    op: mul
                                    amount: 1
                                }
                                cos
                                {
                                    op: mul
                                    amount: 0.763845684934
                                }
                            ]
                        }
                    }
                    {
                        op: add
                        other: {
                            type: reload
                            ops: [
                                #Make the prog go from 0 to 2pi
                                {
                                    op: mul
                                    amount: m1
                                }
                                {
                                    op: add
                                    #Add the rotation offset
                                    amount: b0
                                }
                                {
                                    op: mul
                                    amount: 2
                                }
                                cos
                                {
                                    op: mul
                                    amount: 0.0645692297549
                                }
                            ]
                        }
                    }
                    {
                        op: add
                        other: {
                            type: reload
                            ops: [
                                #Make the prog go from 0 to 2pi
                                {
                                    op: mul
                                    amount: m1
                                }
                                {
                                    op: add
                                    #Add the rotation offset
                                    amount: b0
                                }
                                {
                                    op: mul
                                    amount: 3
                                }
                                cos
                                {
                                    op: mul
                                    amount: 0.033239742455
                                }
                            ]
                        }
                    }
                    
                    
                    #Transform back into base function
                    {
                        op: add
                        amount: -m2
                    }
                    abs
                    {
                        op: curve
                        interp: reverse
                    }
                    {
                        op: mul
                        amount: -1
                    }
                    {
                        op: add
                        amount: m2
                    }
                    
                    #Use the shaft's angle to determine the position of the piston
                    sin
                    {
                        op: mul
                        amount: -L
                    }
                    #Translate based on arm's center
                    {
                        op: add
                        #This is where the rotating arm is centered on
                        amount: 3.25
                    }
                    #Translate based on arm's joint
                    {
                        op: add
                        other: {
                            type: reload
                            ops: [
                                {
                                    op: mul
                                    amount: m1
                                }
                                {
                                    op: add
                                    amount: b0
                                }
                                sin
                                {
                                    op: mul
                                    amount: rad
                                }
                            ]
                        }
                    }
                ]
            }
        }
        {
            type: RegionPart
            suffix: "-joint-arm"
            mirror: true
            x: 7.75
            y: 3.25
            clampProgress: false
            moves: [
                #Emulate the circular movement without rotating the sprite itself
                {
                    x: rad
                    progress: {
                        type: reload
                        ops: [
                            {
                                op: mul
                                amount: m1
                            }
                            {
                                op: add
                                amount: b0
                            }
                            cos
                        ]
                    }
                }
                 {
                    y: rad
                    progress: {
                        type: reload
                        ops: [
                            {
                                op: mul
                                amount: m1
                            }
                            {
                                op: add
                                amount: b0
                            }
                            sin
                        ]
                    }
                }
            ]
        }
        {
            type: RegionPart
            suffix: "-arm"
            mirror: true
            x: 7.75
            y: 3.25
            moveRot: 360
            progress: reload
        }
    ]
}

https://www.desmos.com/calculator/00d51484ea

#Length of the shaft
L: 14

#2 pi
m1: 6.28318530718

#half pi
m2: 1.57079632679

#Initial rotation offset in radians
b0: -0.76579283254

#Radius of the arm endpoint's arc
rad: 9.01734439844

#Average of waveform being aproximated
a0: 1.9121800551

#The three fourier cos constants
0.744217479059, 0.059704422994, 0.0299255877456

#Shorthand for sin
#sineOut is Mathf.sin(a * Mathf.PI / 2); gota remove the dialation and then translate into a cos
sin:
{
    op: mul
    #Divide by pi/2 to offset the dialation from sineIn
    amount: 0.63661977236
}
{
    op: curve
    #Use sineIn because it's cleaner
    interp: sineOut
}

#Shorthand for cos
#just sin but offset
cos:
{
    #Offset into a cos wave
    op: add
    amount: 1.57079632679
}
{
    op: mul
    #Divide by pi/2 to offset the dialation from sineIn
    amount: 0.63661977236
}
{
    op: curve
    #Use sineIn because it's cleaner
    interp: sineOut
}

#Shorthand for abs
abs:
{
    op: add
    amount: 0.5
}
{
    op: curve
    interp: slope
}
{
    op: mul
    amount: 0.5
}
